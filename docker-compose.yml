version: '3.8'

services:
  chatserver:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chatserver
    ports:
      - "5000:8080"  # HTTP
      - "5001:8081"  # HTTPS (if configured)
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ASPNETCORE_HTTP_PORTS=8080
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - chatnetwork

  # Redis - For future horizontal scaling with SignalR backplane
  # Uncomment when implementing Redis backplane
  # redis:
  #   image: redis:7-alpine
  #   container_name: chatserver-redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis-data:/data
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 3s
  #     retries: 3
  #   networks:
  #     - chatnetwork

  # Nginx - Reverse proxy for production
  # Uncomment for production deployment with HTTPS
  # nginx:
  #   image: nginx:alpine
  #   container_name: chatserver-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./certs:/etc/nginx/certs:ro
  #   depends_on:
  #     - chatserver
  #   restart: unless-stopped
  #   networks:
  #     - chatnetwork

networks:
  chatnetwork:
    driver: bridge

# volumes:
#   redis-data:
#     driver: local
